// Generated by gencpp from file irisbot/NodeLoc.msg
// DO NOT EDIT!


#ifndef IRISBOT_MESSAGE_NODELOC_H
#define IRISBOT_MESSAGE_NODELOC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <irisbot/Node.h>
#include <irisbot/Pose.h>

namespace irisbot
{
template <class ContainerAllocator>
struct NodeLoc_
{
  typedef NodeLoc_<ContainerAllocator> Type;

  NodeLoc_()
    : node()
    , pose()  {
    }
  NodeLoc_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::irisbot::Node_<ContainerAllocator>  _node_type;
  _node_type node;

   typedef  ::irisbot::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::irisbot::NodeLoc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irisbot::NodeLoc_<ContainerAllocator> const> ConstPtr;

}; // struct NodeLoc_

typedef ::irisbot::NodeLoc_<std::allocator<void> > NodeLoc;

typedef boost::shared_ptr< ::irisbot::NodeLoc > NodeLocPtr;
typedef boost::shared_ptr< ::irisbot::NodeLoc const> NodeLocConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::irisbot::NodeLoc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::irisbot::NodeLoc_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace irisbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'irisbot': ['/home/lilly/Desktop/ROSws/src/irisbot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::irisbot::NodeLoc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irisbot::NodeLoc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irisbot::NodeLoc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irisbot::NodeLoc_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irisbot::NodeLoc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irisbot::NodeLoc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::irisbot::NodeLoc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a6c7065a9f37e986ee4a92a84079bbb";
  }

  static const char* value(const ::irisbot::NodeLoc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a6c7065a9f37e98ULL;
  static const uint64_t static_value2 = 0x6ee4a92a84079bbbULL;
};

template<class ContainerAllocator>
struct DataType< ::irisbot::NodeLoc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "irisbot/NodeLoc";
  }

  static const char* value(const ::irisbot::NodeLoc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::irisbot::NodeLoc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Node node\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: irisbot/Node\n\
int32 ID\n\
int32 addr\n\
string role\n\
\n\
================================================================================\n\
MSG: irisbot/Pose\n\
float32 x\n\
float32 y\n\
float32 orientation\n\
";
  }

  static const char* value(const ::irisbot::NodeLoc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::irisbot::NodeLoc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeLoc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::irisbot::NodeLoc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::irisbot::NodeLoc_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    s << std::endl;
    Printer< ::irisbot::Node_<ContainerAllocator> >::stream(s, indent + "  ", v.node);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::irisbot::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRISBOT_MESSAGE_NODELOC_H
