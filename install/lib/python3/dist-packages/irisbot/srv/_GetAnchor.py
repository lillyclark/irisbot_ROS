# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irisbot/GetAnchorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetAnchorRequest(genpy.Message):
  _md5sum = "4f22efebf407aadba2ecc69df353d113"
  _type = "irisbot/GetAnchorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] ids
"""
  __slots__ = ['ids']
  _slot_types = ['int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ids

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetAnchorRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ids is None:
        self.ids = []
    else:
      self.ids = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.ids))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ids = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ids.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ids = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irisbot/GetAnchorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import irisbot.msg

class GetAnchorResponse(genpy.Message):
  _md5sum = "bdcc41d11e382e747897694dfa86a621"
  _type = "irisbot/GetAnchorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """NodeLoc[] anchors
float32[] dists


================================================================================
MSG: irisbot/NodeLoc
Node node
Pose pose

================================================================================
MSG: irisbot/Node
int32 ID
int32 addr
string role

================================================================================
MSG: irisbot/Pose
float32 x
float32 y
float32 orientation
"""
  __slots__ = ['anchors','dists']
  _slot_types = ['irisbot/NodeLoc[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       anchors,dists

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetAnchorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.anchors is None:
        self.anchors = []
      if self.dists is None:
        self.dists = []
    else:
      self.anchors = []
      self.dists = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.anchors)
      buff.write(_struct_I.pack(length))
      for val1 in self.anchors:
        _v1 = val1.node
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.ID, _x.addr))
        _x = _v1.role
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v2 = val1.pose
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.orientation))
      length = len(self.dists)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.dists))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.anchors is None:
        self.anchors = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.anchors = []
      for i in range(0, length):
        val1 = irisbot.msg.NodeLoc()
        _v3 = val1.node
        _x = _v3
        start = end
        end += 8
        (_x.ID, _x.addr,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.role = str[start:end].decode('utf-8')
        else:
          _v3.role = str[start:end]
        _v4 = val1.pose
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.orientation,) = _get_struct_3f().unpack(str[start:end])
        self.anchors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.dists = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.anchors)
      buff.write(_struct_I.pack(length))
      for val1 in self.anchors:
        _v5 = val1.node
        _x = _v5
        buff.write(_get_struct_2i().pack(_x.ID, _x.addr))
        _x = _v5.role
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v6 = val1.pose
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.orientation))
      length = len(self.dists)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.dists.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.anchors is None:
        self.anchors = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.anchors = []
      for i in range(0, length):
        val1 = irisbot.msg.NodeLoc()
        _v7 = val1.node
        _x = _v7
        start = end
        end += 8
        (_x.ID, _x.addr,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.role = str[start:end].decode('utf-8')
        else:
          _v7.role = str[start:end]
        _v8 = val1.pose
        _x = _v8
        start = end
        end += 12
        (_x.x, _x.y, _x.orientation,) = _get_struct_3f().unpack(str[start:end])
        self.anchors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.dists = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
class GetAnchor(object):
  _type          = 'irisbot/GetAnchor'
  _md5sum = 'f752ccbb67076c1bee44990c827507b5'
  _request_class  = GetAnchorRequest
  _response_class = GetAnchorResponse
