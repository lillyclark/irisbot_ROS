# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irisbot/DiscoveryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import irisbot.msg

class DiscoveryRequest(genpy.Message):
  _md5sum = "b285f325119edace42114f4aa36c582c"
  _type = "irisbot/DiscoveryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Node myself

================================================================================
MSG: irisbot/Node
int32 ID
int32 addr
string role
"""
  __slots__ = ['myself']
  _slot_types = ['irisbot/Node']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       myself

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiscoveryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.myself is None:
        self.myself = irisbot.msg.Node()
    else:
      self.myself = irisbot.msg.Node()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.myself.ID, _x.myself.addr))
      _x = self.myself.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.myself is None:
        self.myself = irisbot.msg.Node()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.myself.ID, _x.myself.addr,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.myself.role = str[start:end].decode('utf-8')
      else:
        self.myself.role = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.myself.ID, _x.myself.addr))
      _x = self.myself.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.myself is None:
        self.myself = irisbot.msg.Node()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.myself.ID, _x.myself.addr,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.myself.role = str[start:end].decode('utf-8')
      else:
        self.myself.role = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irisbot/DiscoveryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import irisbot.msg

class DiscoveryResponse(genpy.Message):
  _md5sum = "e1df242fcf691517c198036f4f1ddf2f"
  _type = "irisbot/DiscoveryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """NodeLoc anchor1
NodeLoc anchor2
NodeLoc anchor3


================================================================================
MSG: irisbot/NodeLoc
Node node
Pose pose

================================================================================
MSG: irisbot/Node
int32 ID
int32 addr
string role

================================================================================
MSG: irisbot/Pose
float32 x
float32 y
float32 orientation
"""
  __slots__ = ['anchor1','anchor2','anchor3']
  _slot_types = ['irisbot/NodeLoc','irisbot/NodeLoc','irisbot/NodeLoc']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       anchor1,anchor2,anchor3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiscoveryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.anchor1 is None:
        self.anchor1 = irisbot.msg.NodeLoc()
      if self.anchor2 is None:
        self.anchor2 = irisbot.msg.NodeLoc()
      if self.anchor3 is None:
        self.anchor3 = irisbot.msg.NodeLoc()
    else:
      self.anchor1 = irisbot.msg.NodeLoc()
      self.anchor2 = irisbot.msg.NodeLoc()
      self.anchor3 = irisbot.msg.NodeLoc()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.anchor1.node.ID, _x.anchor1.node.addr))
      _x = self.anchor1.node.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f2i().pack(_x.anchor1.pose.x, _x.anchor1.pose.y, _x.anchor1.pose.orientation, _x.anchor2.node.ID, _x.anchor2.node.addr))
      _x = self.anchor2.node.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f2i().pack(_x.anchor2.pose.x, _x.anchor2.pose.y, _x.anchor2.pose.orientation, _x.anchor3.node.ID, _x.anchor3.node.addr))
      _x = self.anchor3.node.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.anchor3.pose.x, _x.anchor3.pose.y, _x.anchor3.pose.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.anchor1 is None:
        self.anchor1 = irisbot.msg.NodeLoc()
      if self.anchor2 is None:
        self.anchor2 = irisbot.msg.NodeLoc()
      if self.anchor3 is None:
        self.anchor3 = irisbot.msg.NodeLoc()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.anchor1.node.ID, _x.anchor1.node.addr,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor1.node.role = str[start:end].decode('utf-8')
      else:
        self.anchor1.node.role = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.anchor1.pose.x, _x.anchor1.pose.y, _x.anchor1.pose.orientation, _x.anchor2.node.ID, _x.anchor2.node.addr,) = _get_struct_3f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor2.node.role = str[start:end].decode('utf-8')
      else:
        self.anchor2.node.role = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.anchor2.pose.x, _x.anchor2.pose.y, _x.anchor2.pose.orientation, _x.anchor3.node.ID, _x.anchor3.node.addr,) = _get_struct_3f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor3.node.role = str[start:end].decode('utf-8')
      else:
        self.anchor3.node.role = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.anchor3.pose.x, _x.anchor3.pose.y, _x.anchor3.pose.orientation,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.anchor1.node.ID, _x.anchor1.node.addr))
      _x = self.anchor1.node.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f2i().pack(_x.anchor1.pose.x, _x.anchor1.pose.y, _x.anchor1.pose.orientation, _x.anchor2.node.ID, _x.anchor2.node.addr))
      _x = self.anchor2.node.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f2i().pack(_x.anchor2.pose.x, _x.anchor2.pose.y, _x.anchor2.pose.orientation, _x.anchor3.node.ID, _x.anchor3.node.addr))
      _x = self.anchor3.node.role
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.anchor3.pose.x, _x.anchor3.pose.y, _x.anchor3.pose.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.anchor1 is None:
        self.anchor1 = irisbot.msg.NodeLoc()
      if self.anchor2 is None:
        self.anchor2 = irisbot.msg.NodeLoc()
      if self.anchor3 is None:
        self.anchor3 = irisbot.msg.NodeLoc()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.anchor1.node.ID, _x.anchor1.node.addr,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor1.node.role = str[start:end].decode('utf-8')
      else:
        self.anchor1.node.role = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.anchor1.pose.x, _x.anchor1.pose.y, _x.anchor1.pose.orientation, _x.anchor2.node.ID, _x.anchor2.node.addr,) = _get_struct_3f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor2.node.role = str[start:end].decode('utf-8')
      else:
        self.anchor2.node.role = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.anchor2.pose.x, _x.anchor2.pose.y, _x.anchor2.pose.orientation, _x.anchor3.node.ID, _x.anchor3.node.addr,) = _get_struct_3f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchor3.node.role = str[start:end].decode('utf-8')
      else:
        self.anchor3.node.role = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.anchor3.pose.x, _x.anchor3.pose.y, _x.anchor3.pose.orientation,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3f2i = None
def _get_struct_3f2i():
    global _struct_3f2i
    if _struct_3f2i is None:
        _struct_3f2i = struct.Struct("<3f2i")
    return _struct_3f2i
class Discovery(object):
  _type          = 'irisbot/Discovery'
  _md5sum = '265f19547b1612b7a0fee47f7672b20c'
  _request_class  = DiscoveryRequest
  _response_class = DiscoveryResponse
