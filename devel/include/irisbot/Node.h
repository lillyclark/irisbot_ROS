// Generated by gencpp from file irisbot/Node.msg
// DO NOT EDIT!


#ifndef IRISBOT_MESSAGE_NODE_H
#define IRISBOT_MESSAGE_NODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace irisbot
{
template <class ContainerAllocator>
struct Node_
{
  typedef Node_<ContainerAllocator> Type;

  Node_()
    : ID(0)
    , addr(0)
    , role()  {
    }
  Node_(const ContainerAllocator& _alloc)
    : ID(0)
    , addr(0)
    , role(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _ID_type;
  _ID_type ID;

   typedef int32_t _addr_type;
  _addr_type addr;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _role_type;
  _role_type role;





  typedef boost::shared_ptr< ::irisbot::Node_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irisbot::Node_<ContainerAllocator> const> ConstPtr;

}; // struct Node_

typedef ::irisbot::Node_<std::allocator<void> > Node;

typedef boost::shared_ptr< ::irisbot::Node > NodePtr;
typedef boost::shared_ptr< ::irisbot::Node const> NodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::irisbot::Node_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::irisbot::Node_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace irisbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'irisbot': ['/home/lilly/Desktop/ROSws/src/irisbot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::irisbot::Node_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irisbot::Node_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irisbot::Node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irisbot::Node_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irisbot::Node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irisbot::Node_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::irisbot::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89ccaae8816f2f8e9fc6aef673dfaa4d";
  }

  static const char* value(const ::irisbot::Node_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89ccaae8816f2f8eULL;
  static const uint64_t static_value2 = 0x9fc6aef673dfaa4dULL;
};

template<class ContainerAllocator>
struct DataType< ::irisbot::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "irisbot/Node";
  }

  static const char* value(const ::irisbot::Node_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::irisbot::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ID\n\
int32 addr\n\
string role\n\
";
  }

  static const char* value(const ::irisbot::Node_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::irisbot::Node_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.addr);
      stream.next(m.role);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Node_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::irisbot::Node_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::irisbot::Node_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "addr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.addr);
    s << indent << "role: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.role);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRISBOT_MESSAGE_NODE_H
